name: Push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:

jobs:
  my-deployment:
    env:
      SLACK_CLIENT_ID: ${{ secrets.PROD_SLACK_CLIENT_ID }}
      SLACK_CLIENT_SECRET: ${{ secrets.PROD_SLACK_CLIENT_SECRET }}
      SLACK_SIGNING_SECRET: ${{ secrets.PROD_SLACK_SIGNING_SECRET }}
      POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
      PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PROD_PGADMIN_DEFAULT_PASSWORD }}
      PGADMIN_DEFAULT_EMAIL: ${{ secrets.PROD_PGADMIN_DEFAULT_EMAIL }}
      SLACK_APP_POSTGRES_PASSWORD: ${{ secrets.PROD_SLACK_APP_POSTGRES_PASSWORD }}
      DATABASE_ENCRYPTION_SECRET_KEY: ${{ secrets.PROD_DATABASE_ENCRYPTION_SECRET_KEY }}
      MERCI_LOKI_LOG_INGESTION_TOKEN: ${{ secrets.PROD_MERCI_LOKI_LOG_INGESTION_TOKEN }}
      MERCI_ENV: prod
    name: deploy to production
    runs-on: ubuntu-latest
    steps:
#      - run: apk update
      - uses: actions-hub/docker/cli@master
        env:
          SKIP_LOGIN: true
        timeout-minutes: 12
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.WWF_SSH_PRIVATE_KEY }}
      - run: mkdir -p ~/.ssh
      - run: echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      - run: ssh ${{ secrets.WWF_SSH_USERNAME }}@${{ secrets.WWF_SERVER }} "mkdir -p ./merci_data/postgres"
      - run: ssh ${{ secrets.WWF_SSH_USERNAME }}@${{ secrets.WWF_SERVER }} "mkdir -p ./merci_data/postgres_backup"
      - run: ssh ${{ secrets.WWF_SSH_USERNAME }}@${{ secrets.WWF_SERVER }} "mkdir -p ./merci_data/sqlite"
      - run: docker context create remote --docker "host=ssh://${{ secrets.WWF_SSH_USERNAME }}@${{ secrets.WWF_SERVER }}"
      - run: docker --context remote compose -f docker/docker-compose.common.yml -f docker/docker-compose.prod.yml build
      - run: docker --context remote compose -f docker/docker-compose.common.yml -f docker/docker-compose.prod.yml up -d --force-recreate
      - run: docker --context remote container prune -f
      - run: docker --context remote image prune -a -f
      - run: docker --context remote volume prune -a -f
      - run: docker --context remote builder prune -af --filter "until=$((7*24))h"
